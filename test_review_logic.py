#!/usr/bin/env python3
"""
Test script to verify the review logic for always posting reviews.
"""

def test_review_event_logic():
    """Test that the correct event is determined based on comments."""
    
    print("Testing review event logic...")
    
    # Test case 1: No comments -> APPROVE
    filtered_comments = []
    if not filtered_comments:
        event = "APPROVE"
    else:
        event = "REQUEST_CHANGES"
    
    assert event == "APPROVE", f"Expected APPROVE for no comments, got {event}"
    print("✓ Test 1 passed: No comments -> APPROVE")
    
    # Test case 2: With comments -> REQUEST_CHANGES
    filtered_comments = [{"body": "Fix this", "path": "test.py", "position": 1}]
    if not filtered_comments:
        event = "APPROVE"
    else:
        event = "REQUEST_CHANGES"
    
    assert event == "REQUEST_CHANGES", f"Expected REQUEST_CHANGES for comments, got {event}"
    print("✓ Test 2 passed: With comments -> REQUEST_CHANGES")
    
    # Test case 3: Multiple comments -> REQUEST_CHANGES
    filtered_comments = [
        {"body": "Fix this", "path": "test.py", "position": 1},
        {"body": "Fix that", "path": "test.py", "position": 5}
    ]
    if not filtered_comments:
        event = "APPROVE"
    else:
        event = "REQUEST_CHANGES"
    
    assert event == "REQUEST_CHANGES", f"Expected REQUEST_CHANGES for multiple comments, got {event}"
    print("✓ Test 3 passed: Multiple comments -> REQUEST_CHANGES")
    
    print("\n✅ All tests passed!")

def test_approval_message():
    """Test the approval message generation."""
    
    print("\nTesting approval message generation...")
    
    def _generate_approval_message():
        return "🤖 **Gemini AI Code Review**\n\nCode looks good! 👍\n\n> This review was automatically generated by Gemini AI."
    
    message = _generate_approval_message()
    
    assert "Code looks good! 👍" in message, "Approval message missing 'Code looks good! 👍'"
    assert "🤖" in message, "Approval message missing robot emoji"
    assert "Gemini AI" in message, "Approval message missing 'Gemini AI'"
    
    print("✓ Approval message format is correct")
    print(f"\nGenerated message:\n{message}\n")
    
    print("✅ Approval message test passed!")

if __name__ == "__main__":
    test_review_event_logic()
    test_approval_message()
    print("\n" + "="*50)
    print("All review logic tests passed successfully! ✨")
    print("="*50)
